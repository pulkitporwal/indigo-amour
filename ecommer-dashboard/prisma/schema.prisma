// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  category   Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  color      Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  images    Image[]    @relation("BillboardToImage")
  category  Category[] @relation("BillboardToCategory")
  storeId   String     @db.ObjectId
  store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String?    @db.ObjectId
  billboard   Billboard? @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products    Product[]  @relation("CategoryToProduct")
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId           String      @db.ObjectId
  store             Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId        String      @db.ObjectId
  category          Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name              String
  collectionTitle   String
  description       String
  cuttedPrice       Float
  availableQuantity Float
  discount          Float
  price             Float
  shippingAvailable String
  isFeatured        Boolean     @default(false)
  isArchived        Boolean     @default(false)
  sizeId            String      @db.ObjectId
  size              Size        @relation(fields: [sizeId], references: [id])
  colorId           String      @db.ObjectId
  color             Color       @relation(fields: [colorId], references: [id])
  images            Image[]     @relation("ProductToImage")
  orderItems        OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  productId   String?    @db.ObjectId
  billboardId String?    @db.ObjectId
  product     Product?   @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  billboard   Billboard? @relation("BillboardToImage", fields: [billboardId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([productId])
  @@index([billboardId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  razorpayOrderId String? @default("")
  razorpayPaymentId String? @default("")
  razorpaySignature String? @default("")
  status     String      @default("pending") // pending, processing, completed, failed
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@index([orderId])
  @@index([productId])
}


model Newsletter {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

